// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Proxy__Adapter_hh__
#define __Proxy__Adapter_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Proxy__Adapter
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Proxy__Adapter
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Proxy__Adapter
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE Proxy_Adapter

_CORBA_MODULE_BEG

  class EZvalue_var;

  class EZvalue : public _CORBA_Unbounded_Sequence_Octet {
  public:
    typedef EZvalue_var _var_type;
    inline EZvalue() {}
    inline EZvalue(const EZvalue& _s)
      : _CORBA_Unbounded_Sequence_Octet(_s) {}

    inline EZvalue(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_Octet(_max) {}
    inline EZvalue(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

  

    inline EZvalue& operator = (const EZvalue& _s) {
      _CORBA_Unbounded_Sequence_Octet::operator=(_s);
      return *this;
    }
  };

  class EZvalue_out;

  class EZvalue_var {
  public:
    inline EZvalue_var() : _pd_seq(0) {}
    inline EZvalue_var(EZvalue* _s) : _pd_seq(_s) {}
    inline EZvalue_var(const EZvalue_var& _s) {
      if( _s._pd_seq )  _pd_seq = new EZvalue(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~EZvalue_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline EZvalue_var& operator = (EZvalue* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline EZvalue_var& operator = (const EZvalue_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new EZvalue;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline EZvalue* operator -> () { return _pd_seq; }
    inline const EZvalue* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator EZvalue& () const { return *_pd_seq; }
#else
    inline operator const EZvalue& () const { return *_pd_seq; }
    inline operator EZvalue& () { return *_pd_seq; }
#endif
      
    inline const EZvalue& in() const { return *_pd_seq; }
    inline EZvalue&       inout()    { return *_pd_seq; }
    inline EZvalue*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline EZvalue* _retn() { EZvalue* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class EZvalue_out;
    
  private:
    EZvalue* _pd_seq;
  };

  class EZvalue_out {
  public:
    inline EZvalue_out(EZvalue*& _s) : _data(_s) { _data = 0; }
    inline EZvalue_out(EZvalue_var& _s)
      : _data(_s._pd_seq) { _s = (EZvalue*) 0; }
    inline EZvalue_out(const EZvalue_out& _s) : _data(_s._data) {}
    inline EZvalue_out& operator = (const EZvalue_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline EZvalue_out& operator = (EZvalue* _s) {
      _data = _s;
      return *this;
    }
    inline operator EZvalue*&()  { return _data; }
    inline EZvalue*& ptr()       { return _data; }
    inline EZvalue* operator->() { return _data; }

    inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    EZvalue*& _data;

  private:
    EZvalue_out();
    EZvalue_out& operator=(const EZvalue_var&);
  };

  class EZport_var;

  class EZport : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 >  {
  public:
    typedef EZport_var _var_type;
    inline EZport() {}
    inline EZport(const EZport& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_s) {}

    inline EZport(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max) {}
    inline EZport(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Long* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline EZport& operator = (const EZport& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class EZport_out;

  class EZport_var {
  public:
    inline EZport_var() : _pd_seq(0) {}
    inline EZport_var(EZport* _s) : _pd_seq(_s) {}
    inline EZport_var(const EZport_var& _s) {
      if( _s._pd_seq )  _pd_seq = new EZport(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~EZport_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline EZport_var& operator = (EZport* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline EZport_var& operator = (const EZport_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new EZport;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Long& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline EZport* operator -> () { return _pd_seq; }
    inline const EZport* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator EZport& () const { return *_pd_seq; }
#else
    inline operator const EZport& () const { return *_pd_seq; }
    inline operator EZport& () { return *_pd_seq; }
#endif
      
    inline const EZport& in() const { return *_pd_seq; }
    inline EZport&       inout()    { return *_pd_seq; }
    inline EZport*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline EZport* _retn() { EZport* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class EZport_out;
    
  private:
    EZport* _pd_seq;
  };

  class EZport_out {
  public:
    inline EZport_out(EZport*& _s) : _data(_s) { _data = 0; }
    inline EZport_out(EZport_var& _s)
      : _data(_s._pd_seq) { _s = (EZport*) 0; }
    inline EZport_out(const EZport_out& _s) : _data(_s._data) {}
    inline EZport_out& operator = (const EZport_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline EZport_out& operator = (EZport* _s) {
      _data = _s;
      return *this;
    }
    inline operator EZport*&()  { return _data; }
    inline EZport*& ptr()       { return _data; }
    inline EZport* operator->() { return _data; }

    inline ::CORBA::Long& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    EZport*& _data;

  private:
    EZport_out();
    EZport_out& operator=(const EZport_var&);
  };

  typedef ::CORBA::ULong EZuint;
  typedef ::CORBA::ULong_out EZuint_out;

  typedef EZuint EZStr_Num;
  typedef EZuint_out EZStr_Num_out;

  typedef EZuint EZstatus;
  typedef EZuint_out EZstatus_out;

  typedef EZuint KeySize;
  typedef EZuint_out KeySize_out;

  typedef EZuint ResultSize;
  typedef EZuint_out ResultSize_out;

  typedef ::CORBA::ULong uint32;
  typedef ::CORBA::ULong_out uint32_out;

  typedef ::CORBA::Boolean EZPortStatus;
  typedef ::CORBA::Boolean_out EZPortStatus_out;

  enum EZStruct_type { EzapiParse2, EzapiSearch1, EzapiSearch2, EzapiParse /*, __max_EZStruct_type=0xffffffff */ };
  typedef EZStruct_type& EZStruct_type_out;

  enum EZapiTM_type { EZapiTM_ID_TMa, EZapiTM_ID_TMb /*, __max_EZapiTM_type=0xffffffff */ };
  typedef EZapiTM_type& EZapiTM_type_out;

  enum EZapiTM_Shaping { ShapingMode_EXPLICIT, ShapingMode_UNSHAPED, ShapingMode_BEST_EFFORT, ShapingMode_UNLIMITED_EXCESS, ShapingMode_NO_EXCESS, ShapingMode_NO_COMMIT /*, __max_EZapiTM_Shaping=0xffffffff */ };
  typedef EZapiTM_Shaping& EZapiTM_Shaping_out;

  enum EZapiTM_ShapingLevel { EZapiTM_ShapingLevel_0, EZapiTM_ShapingLevel_1, EZapiTM_ShapingLevel_2, EZapiTM_ShapingLevel_3, EZapiTM_ShapingLevel_4 /*, __max_EZapiTM_ShapingLevel=0xffffffff */ };
  typedef EZapiTM_ShapingLevel& EZapiTM_ShapingLevel_out;

  enum EZapiTM_WREDLevel { EZapiTM_WREDLevel_GLOBAL, EZapiTM_WREDLevel_TM, EZapiTM_WREDLevel_12, EZapiTM_WREDLevel_3, EZapiTM_WREDLevel_4 /*, __max_EZapiTM_WREDLevel=0xffffffff */ };
  typedef EZapiTM_WREDLevel& EZapiTM_WREDLevel_out;

  enum EZapiTM_Entity { EZapiTM_EntityLevel_0, EZapiTM_EntityLevel_1, EZapiTM_EntityLevel_2, EZapiTM_EntityLevel_3, EZapiTM_EntityLevel_4 /*, __max_EZapiTM_Entity=0xffffffff */ };
  typedef EZapiTM_Entity& EZapiTM_Entity_out;

  enum EZapiTM_WFQLevel { EZapiTM_WFQLevel_0, EZapiTM_WFQLevel_1, EZapiTM_WFQLevel_2, EZapiTM_WFQLevel_3, EZapiTM_WFQLevel_4 /*, __max_EZapiTM_WFQLevel=0xffffffff */ };
  typedef EZapiTM_WFQLevel& EZapiTM_WFQLevel_out;

  enum EZapiTM_Priority { EZapiTM_Priority_NORMAL, EZapiTM_Priority_HIGH, EZapiTM_Priority_PROPAGATED /*, __max_EZapiTM_Priority=0xffffffff */ };
  typedef EZapiTM_Priority& EZapiTM_Priority_out;

  enum EZapiFrame_TransmitQ { EZapiFrame_TransmitQ_OQ, EZapiFrame_TransmitQ_ETFD, EZapiFrame_TransmitQ_TMa, EZapiFrame_TransmitQ_TMb /*, __max_EZapiFrame_TransmitQ=0xffffffff */ };
  typedef EZapiFrame_TransmitQ& EZapiFrame_TransmitQ_out;

  enum EZapiFrame_BufferRegion { EZapiFrame_BufferRegion_RX, EZapiFrame_BufferRegion_TX /*, __max_EZapiFrame_BufferRegion=0xffffffff */ };
  typedef EZapiFrame_BufferRegion& EZapiFrame_BufferRegion_out;

#ifndef __Proxy__Adapter_mStructConf__
#define __Proxy__Adapter_mStructConf__

  class StructConf;
  class _objref_StructConf;
  class _impl_StructConf;
  
  typedef _objref_StructConf* StructConf_ptr;
  typedef StructConf_ptr StructConfRef;

  class StructConf_Helper {
  public:
    typedef StructConf_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_StructConf, StructConf_Helper> StructConf_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_StructConf,StructConf_Helper > StructConf_out;

#endif

  // interface StructConf
  class StructConf {
  public:
    // Declarations for this interface type.
    typedef StructConf_ptr _ptr_type;
    typedef StructConf_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_StructConf :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    EZstatus testStructConf(::Proxy_Adapter::EZuint& testVal);
    EZstatus setStruct(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::KeySize k_length, ::Proxy_Adapter::ResultSize r_length, const ::Proxy_Adapter::EZvalue& key, const ::Proxy_Adapter::EZvalue& result, const ::Proxy_Adapter::EZvalue& mask);
    EZstatus getStruct(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::uint32 index, ::Proxy_Adapter::KeySize& k_length, ::Proxy_Adapter::ResultSize& r_length, ::Proxy_Adapter::EZvalue& key, ::Proxy_Adapter::EZvalue& result, ::Proxy_Adapter::EZvalue& mask);
    EZstatus getStructResult(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::KeySize k_length, const ::Proxy_Adapter::EZvalue& key, ::Proxy_Adapter::ResultSize r_length, ::Proxy_Adapter::EZvalue& result);
    EZstatus getStructLimit(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::uint32& limit);
    EZstatus getStructLength(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::uint32& length);
    EZstatus delStruct(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::KeySize k_length, ::Proxy_Adapter::ResultSize r_length, const ::Proxy_Adapter::EZvalue& key, const ::Proxy_Adapter::EZvalue& result, const ::Proxy_Adapter::EZvalue& mask);
    EZstatus delStructAllEntries(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num);

    inline _objref_StructConf()  { _PR_setobj(0); }  // nil
    _objref_StructConf(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_StructConf();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_StructConf(const _objref_StructConf&);
    _objref_StructConf& operator = (const _objref_StructConf&);
    // not implemented

    friend class StructConf;
  };

  class _pof_StructConf : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_StructConf() : _OMNI_NS(proxyObjectFactory)(StructConf::_PD_repoId) {}
    virtual ~_pof_StructConf();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_StructConf :
    public virtual omniServant
  {
  public:
    virtual ~_impl_StructConf();

    virtual EZstatus testStructConf(::Proxy_Adapter::EZuint& testVal) = 0;
    virtual EZstatus setStruct(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::KeySize k_length, ::Proxy_Adapter::ResultSize r_length, const ::Proxy_Adapter::EZvalue& key, const ::Proxy_Adapter::EZvalue& result, const ::Proxy_Adapter::EZvalue& mask) = 0;
    virtual EZstatus getStruct(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::uint32 index, ::Proxy_Adapter::KeySize& k_length, ::Proxy_Adapter::ResultSize& r_length, ::Proxy_Adapter::EZvalue& key, ::Proxy_Adapter::EZvalue& result, ::Proxy_Adapter::EZvalue& mask) = 0;
    virtual EZstatus getStructResult(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::KeySize k_length, const ::Proxy_Adapter::EZvalue& key, ::Proxy_Adapter::ResultSize r_length, ::Proxy_Adapter::EZvalue& result) = 0;
    virtual EZstatus getStructLimit(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::uint32& limit) = 0;
    virtual EZstatus getStructLength(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::uint32& length) = 0;
    virtual EZstatus delStruct(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num, ::Proxy_Adapter::KeySize k_length, ::Proxy_Adapter::ResultSize r_length, const ::Proxy_Adapter::EZvalue& key, const ::Proxy_Adapter::EZvalue& result, const ::Proxy_Adapter::EZvalue& mask) = 0;
    virtual EZstatus delStructAllEntries(::Proxy_Adapter::EZStruct_type struct_type, ::Proxy_Adapter::EZStr_Num struct_num) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __Proxy__Adapter_mDevMonitor__
#define __Proxy__Adapter_mDevMonitor__

  class DevMonitor;
  class _objref_DevMonitor;
  class _impl_DevMonitor;
  
  typedef _objref_DevMonitor* DevMonitor_ptr;
  typedef DevMonitor_ptr DevMonitorRef;

  class DevMonitor_Helper {
  public:
    typedef DevMonitor_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_DevMonitor, DevMonitor_Helper> DevMonitor_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_DevMonitor,DevMonitor_Helper > DevMonitor_out;

#endif

  // interface DevMonitor
  class DevMonitor {
  public:
    // Declarations for this interface type.
    typedef DevMonitor_ptr _ptr_type;
    typedef DevMonitor_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_DevMonitor :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    EZstatus testDevMonitor(::Proxy_Adapter::EZuint& testVal);
    EZstatus getPorts(::Proxy_Adapter::EZport& ports);
    EZstatus getPortStatus(::Proxy_Adapter::EZuint port_number, ::Proxy_Adapter::EZPortStatus& port_status);
    EZstatus getPortName(::Proxy_Adapter::EZuint port_number, ::CORBA::String_out port_name);

    inline _objref_DevMonitor()  { _PR_setobj(0); }  // nil
    _objref_DevMonitor(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_DevMonitor();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_DevMonitor(const _objref_DevMonitor&);
    _objref_DevMonitor& operator = (const _objref_DevMonitor&);
    // not implemented

    friend class DevMonitor;
  };

  class _pof_DevMonitor : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_DevMonitor() : _OMNI_NS(proxyObjectFactory)(DevMonitor::_PD_repoId) {}
    virtual ~_pof_DevMonitor();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_DevMonitor :
    public virtual omniServant
  {
  public:
    virtual ~_impl_DevMonitor();

    virtual EZstatus testDevMonitor(::Proxy_Adapter::EZuint& testVal) = 0;
    virtual EZstatus getPorts(::Proxy_Adapter::EZport& ports) = 0;
    virtual EZstatus getPortStatus(::Proxy_Adapter::EZuint port_number, ::Proxy_Adapter::EZPortStatus& port_status) = 0;
    virtual EZstatus getPortName(::Proxy_Adapter::EZuint port_number, ::CORBA::String_out port_name) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __Proxy__Adapter_mTrafficMngt__
#define __Proxy__Adapter_mTrafficMngt__

  class TrafficMngt;
  class _objref_TrafficMngt;
  class _impl_TrafficMngt;
  
  typedef _objref_TrafficMngt* TrafficMngt_ptr;
  typedef TrafficMngt_ptr TrafficMngtRef;

  class TrafficMngt_Helper {
  public:
    typedef TrafficMngt_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_TrafficMngt, TrafficMngt_Helper> TrafficMngt_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_TrafficMngt,TrafficMngt_Helper > TrafficMngt_out;

#endif

  // interface TrafficMngt
  class TrafficMngt {
  public:
    // Declarations for this interface type.
    typedef TrafficMngt_ptr _ptr_type;
    typedef TrafficMngt_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_TrafficMngt :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    EZstatus testTrafficMngt(::Proxy_Adapter::EZuint& testVal);
    EZstatus tmSetShapingProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32 cir, ::Proxy_Adapter::uint32 cbs, ::Proxy_Adapter::EZapiTM_ShapingLevel level, ::Proxy_Adapter::EZapiTM_type tm);
    EZstatus tmGetShapingProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32& cir, ::Proxy_Adapter::uint32& cbs, ::Proxy_Adapter::EZapiTM_ShapingLevel level, ::Proxy_Adapter::EZapiTM_type tm);
    EZstatus tmSetEntity(::Proxy_Adapter::uint32 shaping_profile, ::Proxy_Adapter::uint32 wred_profile, ::Proxy_Adapter::uint32 wfq_profile, ::Proxy_Adapter::EZapiTM_Priority priority, ::Proxy_Adapter::uint32 entity, ::Proxy_Adapter::EZapiTM_Entity level, ::Proxy_Adapter::EZapiTM_Shaping mode, ::Proxy_Adapter::EZapiTM_type tm);
    EZstatus tmGetEntity(::Proxy_Adapter::uint32& shaping_profile, ::Proxy_Adapter::uint32& wred_profile, ::Proxy_Adapter::uint32& wfq_profile, ::Proxy_Adapter::EZapiTM_Priority& priority, ::Proxy_Adapter::uint32 entity, ::Proxy_Adapter::EZapiTM_Entity level, ::Proxy_Adapter::EZapiTM_Shaping& mode, ::Proxy_Adapter::EZapiTM_type tm);
    EZstatus tmSetWfqProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32 weight, ::Proxy_Adapter::EZapiTM_WFQLevel level, ::Proxy_Adapter::EZapiTM_type tm);
    EZstatus tmGetWfqProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32& weight, ::Proxy_Adapter::EZapiTM_WFQLevel level, ::Proxy_Adapter::EZapiTM_type tm);
    EZstatus tmSetWredProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32 guaranteedThresh, ::Proxy_Adapter::EZapiTM_WREDLevel level, ::Proxy_Adapter::EZapiTM_type tm);
    EZstatus tmGetWredProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32& guaranteedThresh, ::Proxy_Adapter::EZapiTM_WREDLevel level, ::Proxy_Adapter::EZapiTM_type tm);
    EZstatus setTokenbucketProfile(::Proxy_Adapter::uint32 profil_num, ::Proxy_Adapter::uint32 cir, ::Proxy_Adapter::uint32 cbs);
    EZstatus setTokenbucketCounter(::Proxy_Adapter::uint32 counter_num, ::Proxy_Adapter::uint32 tb_profile);
    EZstatus getTokenbucketProfile(::Proxy_Adapter::uint32 profil_num, ::Proxy_Adapter::uint32& cir, ::Proxy_Adapter::uint32& cbs);
    EZstatus getTokenbucketCounter(::Proxy_Adapter::uint32 counter_num, ::Proxy_Adapter::uint32& tb_profile);

    inline _objref_TrafficMngt()  { _PR_setobj(0); }  // nil
    _objref_TrafficMngt(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_TrafficMngt();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_TrafficMngt(const _objref_TrafficMngt&);
    _objref_TrafficMngt& operator = (const _objref_TrafficMngt&);
    // not implemented

    friend class TrafficMngt;
  };

  class _pof_TrafficMngt : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_TrafficMngt() : _OMNI_NS(proxyObjectFactory)(TrafficMngt::_PD_repoId) {}
    virtual ~_pof_TrafficMngt();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_TrafficMngt :
    public virtual omniServant
  {
  public:
    virtual ~_impl_TrafficMngt();

    virtual EZstatus testTrafficMngt(::Proxy_Adapter::EZuint& testVal) = 0;
    virtual EZstatus tmSetShapingProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32 cir, ::Proxy_Adapter::uint32 cbs, ::Proxy_Adapter::EZapiTM_ShapingLevel level, ::Proxy_Adapter::EZapiTM_type tm) = 0;
    virtual EZstatus tmGetShapingProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32& cir, ::Proxy_Adapter::uint32& cbs, ::Proxy_Adapter::EZapiTM_ShapingLevel level, ::Proxy_Adapter::EZapiTM_type tm) = 0;
    virtual EZstatus tmSetEntity(::Proxy_Adapter::uint32 shaping_profile, ::Proxy_Adapter::uint32 wred_profile, ::Proxy_Adapter::uint32 wfq_profile, ::Proxy_Adapter::EZapiTM_Priority priority, ::Proxy_Adapter::uint32 entity, ::Proxy_Adapter::EZapiTM_Entity level, ::Proxy_Adapter::EZapiTM_Shaping mode, ::Proxy_Adapter::EZapiTM_type tm) = 0;
    virtual EZstatus tmGetEntity(::Proxy_Adapter::uint32& shaping_profile, ::Proxy_Adapter::uint32& wred_profile, ::Proxy_Adapter::uint32& wfq_profile, ::Proxy_Adapter::EZapiTM_Priority& priority, ::Proxy_Adapter::uint32 entity, ::Proxy_Adapter::EZapiTM_Entity level, ::Proxy_Adapter::EZapiTM_Shaping& mode, ::Proxy_Adapter::EZapiTM_type tm) = 0;
    virtual EZstatus tmSetWfqProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32 weight, ::Proxy_Adapter::EZapiTM_WFQLevel level, ::Proxy_Adapter::EZapiTM_type tm) = 0;
    virtual EZstatus tmGetWfqProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32& weight, ::Proxy_Adapter::EZapiTM_WFQLevel level, ::Proxy_Adapter::EZapiTM_type tm) = 0;
    virtual EZstatus tmSetWredProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32 guaranteedThresh, ::Proxy_Adapter::EZapiTM_WREDLevel level, ::Proxy_Adapter::EZapiTM_type tm) = 0;
    virtual EZstatus tmGetWredProfile(::Proxy_Adapter::uint32 profile, ::Proxy_Adapter::uint32& guaranteedThresh, ::Proxy_Adapter::EZapiTM_WREDLevel level, ::Proxy_Adapter::EZapiTM_type tm) = 0;
    virtual EZstatus setTokenbucketProfile(::Proxy_Adapter::uint32 profil_num, ::Proxy_Adapter::uint32 cir, ::Proxy_Adapter::uint32 cbs) = 0;
    virtual EZstatus setTokenbucketCounter(::Proxy_Adapter::uint32 counter_num, ::Proxy_Adapter::uint32 tb_profile) = 0;
    virtual EZstatus getTokenbucketProfile(::Proxy_Adapter::uint32 profil_num, ::Proxy_Adapter::uint32& cir, ::Proxy_Adapter::uint32& cbs) = 0;
    virtual EZstatus getTokenbucketCounter(::Proxy_Adapter::uint32 counter_num, ::Proxy_Adapter::uint32& tb_profile) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __Proxy__Adapter_mNP3FrameHandl__
#define __Proxy__Adapter_mNP3FrameHandl__

  class NP3FrameHandl;
  class _objref_NP3FrameHandl;
  class _impl_NP3FrameHandl;
  
  typedef _objref_NP3FrameHandl* NP3FrameHandl_ptr;
  typedef NP3FrameHandl_ptr NP3FrameHandlRef;

  class NP3FrameHandl_Helper {
  public:
    typedef NP3FrameHandl_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_NP3FrameHandl, NP3FrameHandl_Helper> NP3FrameHandl_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_NP3FrameHandl,NP3FrameHandl_Helper > NP3FrameHandl_out;

#endif

  // interface NP3FrameHandl
  class NP3FrameHandl {
  public:
    // Declarations for this interface type.
    typedef NP3FrameHandl_ptr _ptr_type;
    typedef NP3FrameHandl_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_NP3FrameHandl :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    EZstatus testNP3FrameHandl(::Proxy_Adapter::EZuint& testVal);
    EZstatus frameSend(::Proxy_Adapter::uint32 destination_port, ::Proxy_Adapter::uint32 uqTMFlowId, ::Proxy_Adapter::EZapiFrame_BufferRegion buffor_region, ::Proxy_Adapter::EZapiFrame_TransmitQ transmisions_direction, const ::Proxy_Adapter::EZvalue& frame_data, ::Proxy_Adapter::uint32 frame_length);
    EZstatus frameRead(::Proxy_Adapter::EZvalue& frame_data, ::Proxy_Adapter::uint32& frame_length);

    inline _objref_NP3FrameHandl()  { _PR_setobj(0); }  // nil
    _objref_NP3FrameHandl(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_NP3FrameHandl();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_NP3FrameHandl(const _objref_NP3FrameHandl&);
    _objref_NP3FrameHandl& operator = (const _objref_NP3FrameHandl&);
    // not implemented

    friend class NP3FrameHandl;
  };

  class _pof_NP3FrameHandl : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_NP3FrameHandl() : _OMNI_NS(proxyObjectFactory)(NP3FrameHandl::_PD_repoId) {}
    virtual ~_pof_NP3FrameHandl();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_NP3FrameHandl :
    public virtual omniServant
  {
  public:
    virtual ~_impl_NP3FrameHandl();

    virtual EZstatus testNP3FrameHandl(::Proxy_Adapter::EZuint& testVal) = 0;
    virtual EZstatus frameSend(::Proxy_Adapter::uint32 destination_port, ::Proxy_Adapter::uint32 uqTMFlowId, ::Proxy_Adapter::EZapiFrame_BufferRegion buffor_region, ::Proxy_Adapter::EZapiFrame_TransmitQ transmisions_direction, const ::Proxy_Adapter::EZvalue& frame_data, ::Proxy_Adapter::uint32 frame_length) = 0;
    virtual EZstatus frameRead(::Proxy_Adapter::EZvalue& frame_data, ::Proxy_Adapter::uint32& frame_length) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_Proxy_Adapter
_CORBA_MODULE_BEG

  class StructConf :
    public virtual Proxy_Adapter::_impl_StructConf,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~StructConf();

    inline ::Proxy_Adapter::StructConf_ptr _this() {
      return (::Proxy_Adapter::StructConf_ptr) _do_this(::Proxy_Adapter::StructConf::_PD_repoId);
    }
  };

  class DevMonitor :
    public virtual Proxy_Adapter::_impl_DevMonitor,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~DevMonitor();

    inline ::Proxy_Adapter::DevMonitor_ptr _this() {
      return (::Proxy_Adapter::DevMonitor_ptr) _do_this(::Proxy_Adapter::DevMonitor::_PD_repoId);
    }
  };

  class TrafficMngt :
    public virtual Proxy_Adapter::_impl_TrafficMngt,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~TrafficMngt();

    inline ::Proxy_Adapter::TrafficMngt_ptr _this() {
      return (::Proxy_Adapter::TrafficMngt_ptr) _do_this(::Proxy_Adapter::TrafficMngt::_PD_repoId);
    }
  };

  class NP3FrameHandl :
    public virtual Proxy_Adapter::_impl_NP3FrameHandl,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~NP3FrameHandl();

    inline ::Proxy_Adapter::NP3FrameHandl_ptr _this() {
      return (::Proxy_Adapter::NP3FrameHandl_ptr) _do_this(::Proxy_Adapter::NP3FrameHandl::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_Proxy_Adapter
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(Proxy_Adapter::EZStruct_type _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZStruct_type& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::EzapiParse) {
    _e = (Proxy_Adapter::EZStruct_type) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(Proxy_Adapter::EZapiTM_type _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZapiTM_type& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::EZapiTM_ID_TMb) {
    _e = (Proxy_Adapter::EZapiTM_type) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(Proxy_Adapter::EZapiTM_Shaping _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZapiTM_Shaping& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::ShapingMode_NO_COMMIT) {
    _e = (Proxy_Adapter::EZapiTM_Shaping) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(Proxy_Adapter::EZapiTM_ShapingLevel _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZapiTM_ShapingLevel& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::EZapiTM_ShapingLevel_4) {
    _e = (Proxy_Adapter::EZapiTM_ShapingLevel) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(Proxy_Adapter::EZapiTM_WREDLevel _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZapiTM_WREDLevel& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::EZapiTM_WREDLevel_4) {
    _e = (Proxy_Adapter::EZapiTM_WREDLevel) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(Proxy_Adapter::EZapiTM_Entity _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZapiTM_Entity& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::EZapiTM_EntityLevel_4) {
    _e = (Proxy_Adapter::EZapiTM_Entity) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(Proxy_Adapter::EZapiTM_WFQLevel _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZapiTM_WFQLevel& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::EZapiTM_WFQLevel_4) {
    _e = (Proxy_Adapter::EZapiTM_WFQLevel) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(Proxy_Adapter::EZapiTM_Priority _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZapiTM_Priority& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::EZapiTM_Priority_PROPAGATED) {
    _e = (Proxy_Adapter::EZapiTM_Priority) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(Proxy_Adapter::EZapiFrame_TransmitQ _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZapiFrame_TransmitQ& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::EZapiFrame_TransmitQ_TMb) {
    _e = (Proxy_Adapter::EZapiFrame_TransmitQ) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(Proxy_Adapter::EZapiFrame_BufferRegion _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (Proxy_Adapter::EZapiFrame_BufferRegion& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= Proxy_Adapter::EZapiFrame_BufferRegion_TX) {
    _e = (Proxy_Adapter::EZapiFrame_BufferRegion) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}



inline void
Proxy_Adapter::StructConf::_marshalObjRef(::Proxy_Adapter::StructConf_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
Proxy_Adapter::DevMonitor::_marshalObjRef(::Proxy_Adapter::DevMonitor_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
Proxy_Adapter::TrafficMngt::_marshalObjRef(::Proxy_Adapter::TrafficMngt_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
Proxy_Adapter::NP3FrameHandl::_marshalObjRef(::Proxy_Adapter::NP3FrameHandl_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Proxy__Adapter
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Proxy__Adapter
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Proxy__Adapter
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Proxy__Adapter
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Proxy__Adapter
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Proxy__Adapter
#endif

#endif  // __Proxy__Adapter_hh__

